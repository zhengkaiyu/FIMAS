function info = read_bh_setup_info(fid, setup_offset, setup_length)
% read_setup_info - Flexible parser for SDT setup section
% Reads ASCII and binary parts, dynamically parses available structures.
BHBinHdr_format=struct('soft_rev','ulong',...
    'para_length','ulong',...
    'reserved1','ulong',...
    'reserved2','ushort');

SPCBinHdr_format=struct('FCS_old_offs','ulong',...
    'FCS_old_size','ulong',...
    'gr1_offs','ulong',...
    'gr1_size','ulong',...
    'FCS_offs','ulong',...
    'FCS_size','ulong',...
    'FIDA_offs','ulong',...
    'FIDA_size','ulong',...
    'FILDA_offs','ulong',...
    'FILDA_size','ulong',...
    'gr2_offs','ulong',...
    'gr_no','ushort',...
    'hst_no','ushort',...
    'hst_offs','ulong',...
    'GVD_offs','ulong',...
    'GVD_size','ushort',...
    'FIT_offs','ushort',...
    'FIT_size','ushort',...
    'extdev_offs','ushort',...
    'extdev_size','ushort',...
    'binhdrext_offs','ulong',...
    'binhdrext_size','ushort');

SPCBinHdrExt_format=struct('MCS_img_offs','ulong',...
    'MCS_img_size','ulong',...
    'mom_no','ushort',...
    'MOM_size','ushort',...
    'mom_offs','ulong',...
    'syspar_ext_offs','ulong',...
    'syspar_ext_size','ulong',...
    'mosaic_offs','ulong',...
    'mosaic_size','ulong',...
    'WF_img_offs','ulong',...
    'WF_img_size','ushort',...
    'WndLayout_offs','ulong',...
    'WndLayout_size','ushort',...
    'trpar_ext_offs','ulong',...
    'trpar_ext_size','ushort',...
    'CorPar_offs','ulong',...
    'CorPar_size','ushort',...
    'CorPar_number','ushort',...
    'LifeTrPar_offs','ulong',...
    'LifeTrPar_size','ushort',...
    'LifeTrPar_number','ushort',...
    'HST3DPar_offs','ulong',...
    'HST3DPar_size','ushort',...
    'HST3DPar_number','ushort',...
    'dcc_ext_offs','ulong',...
    'dcc_ext_size','ushort',...
    'extension','char');

%DCCParam=struct();

%
DCCdata_format=struct('base_adr','ushort',...
    'active','short',...
    'c1_p5V','short',...
    'c1_m5V','short',...
    'c1_gain_HV','float',...
    'c1_p12V','short',...
    'c2_p5V','short',...
    'c2_m5V','short',...
    'c2_p12V','short',...
    'c2_digout','short',...
    'c3_p5V','short',...
    'c3_m5V','short',...
    'c3_p12V','short',...
    'c3_coolVolt','float',...
    'c3_coolCurr','float',...
    'c3_gain_HV','float',...
    'c3_cooling','short');

%Mosaic param structure
mosaic_format=struct('enable','short',...
    'size_x','short',...
    'size_y','short',...
    'frames_per_el','short',...
    'type','short',... %0,1,2,3,4
    'restart','short',...
    'grid','short',...
    'grid_color','int',...
    'accu_cycles','int',...
    'chan_per_el','short',...
    'zplanes_no','short',...
    'reserve','char');


try
    % ascii part
    buffer=read_file_section_ascii_info(fid,setup_offset,setup_length,'*SETUP','*END',[]);
    info.ascii_info=buffer;
    % Move to the setup offset


    binarypart_offset=setup_offset+numel(buffer)+19;  % ignore the BIN_PARA_BEGIN: header
    fseek(fid, binarypart_offset, 'bof');
    fread(fid,1,'uint8'); % read 1 byte = the '0' which is the EOS character

    % start read bhbinhdr and spcbinhdr
    Setup_bin_length=fread(fid,1,'uint32'); % 4-byte value of binary setup length

    % the rest of the offset and size is relative to this file position
    binarypart_offset=ftell(fid);

    info.binary_info=read_file_section_binary_info(fid,binarypart_offset,BHBinHdr_format);

    spcbinhdr=read_file_section_binary_info(fid,ftell(fid),SPCBinHdr_format);
    spcbinhdrext=read_file_section_binary_info(fid,binarypart_offset+spcbinhdr.binhdrext_offs,SPCBinHdrExt_format);
    % merge the header
    info.spc_header=merge_struct(spcbinhdr,spcbinhdrext);

    % Parse Combined SPC Header (SPCBinHdr + SPCBinHdrExt)
    fields=regexp(fieldnames(info.spc_header),'\w*(?=_offs)','match');
    fields=[fields{:}];

    % Dynamically parse sections based on offsets
    for sec = fields
        sec_name = sec{1};
        offs_field = [sec_name, '_offs'];
        size_field = [sec_name, '_size'];
        sectionformat=[sec_name,'_format'];

        if exist(sectionformat,"var")
            if info.spc_header.(offs_field) > 0 && info.spc_header.(size_field) > 0
                buffer=read_file_section_binary_info(fid,binarypart_offset+info.spc_header.(offs_field),eval(sectionformat));
                info.(sec_name)=buffer;
            end
        else
            fprintf('have not written anything for reading %s yet\n',sec_name);
        end
    end
catch exception
    warning('Error reading setup info: %s', exception.message);
    info = struct();
end

end